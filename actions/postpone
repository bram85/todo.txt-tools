#!/usr/bin/env perl

# TodoTxt Tools
# Copyright (C) 2013 Bram Schoenmakers <me@bramschoenmakers.nl>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;

use Time::Piece;

use lib 'lib';
use TodoTxt;
use RelativeDate;

my $filename = $ENV{ 'TODO_DIR' } . "/todo.txt";
my $todos = TodoTxt::readTodos( $filename );

my $withStartDate = $ARGV[ 1 ] eq '-s';
shift @ARGV if $withStartDate;

sub usage {
  print STDERR <<END;
Usage: todo.sh postpone [-s] TASK#[,TASK#,...] <date>
       todo.sh postpone [-s] TASK#[,TASK#,...] <pattern>

Examples:
       todo.sh postpone 1 1w
       Postpones task 1 with one week.

       todo.sh postpone -s 1 1w
       Postpones task 1 with one week, including the start date.
END
  exit 1;
}

sub getDueDate {
  my ( $date, $offset ) = @_;

  return TodoTxt::isDate( $date ) ? $date : TodoTxt::convertRelativeDateString( $date, $offset );
}

sub advanceDate {
  my ( $todo, $newDueDate ) = @_;

  if ( $withStartDate ) {
    TodoTxt::advanceDates( $todo, $newDueDate );
  }
  else {
    TodoTxt::setTagValue( $todo, 'due', $newDueDate );
  }
}

my @numbers = grep { /\d+/ } split( ',', $ARGV[ 1 ] );
my $inputDate = $ARGV[ 2 ];

if ( !@numbers || ( !TodoTxt::isDate( $inputDate ) && !TodoTxt::isRelativeDatePattern( $inputDate ) ) ) {
  usage();
}

my $dirty = 0;
foreach my $number ( @numbers ) {
  my $todo = TodoTxt::getTodo( $number );

  unless ( $todo ) {
    print STDERR "Error: Task $number does not exist.\n";
    next;
  }

  unless ( TodoTxt::hasTag( $todo, 'due' ) ) {
    print STDERR "Warning: Task $number has no due date.\n";
    next;
  }

  my $currentDueDate = TodoTxt::getTagValue( $todo, 'due' );
  my $newDueDate = getDueDate( $inputDate, $currentDueDate );

  advanceDate( $todo, $newDueDate );
  TodoTxt::printTodo( $todo );
  $dirty = 1;
}

TodoTxt::writeTodos( $filename ) if $dirty;
